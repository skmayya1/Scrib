// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}


model user {
  id            String     @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime?  @default(now()) // Default to current timestamp
  updatedAt     DateTime?  @default(now())
  meet          Meet[]
  sessions      Session[]
  accounts      Account[]
  meetings      Meetings[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Meet {
  id        String    @id @default(cuid())
  chunkPath String    // Path to the audio chunk file
  userId    String    @unique
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now()) // Default to current timestamp
  updatedAt DateTime? @default(now())

  @@map("temp_chunks")
}

model Meetings {
  id           String    @id @default(cuid())
  Audio        Bytes?
  Text         String?
  title        String?
  description  String?
  keytakeaways String[]
  deadlines    String[]
  tasks        Task[]
  isPublic     Boolean   @default(false)
  Editable     Boolean   @default(false)
  userId       String
  user         user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime? @default(now()) // Default to current timestamp
  updatedAt    DateTime? @default(now())
}

model Task {
  id          String   @id @default(cuid())
  task        String
  assigned_to String?
  deadline    String?
  meetingId   String
  isCompleted Boolean  @default(false)
  meeting     Meetings @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
